@{
    Layout = null;
}

<!DOCTYPE html>
<html>
    <head>
<script>

    window.onload = function () {
        var color = '';
        var canvas = document.querySelector('#paint');
        console.log('window onload event called');

        var ctx = canvas.getContext('2d');

        var sketch = document.querySelector('#sketch');
        var sketch_style = getComputedStyle(sketch);
        canvas.width = parseInt(sketch_style.getPropertyValue('width'));
        canvas.height = parseInt(sketch_style.getPropertyValue('height'));


        // Creating a tmp canvas
        var tmp_canvas = document.createElement('canvas');
        var tmp_ctx = tmp_canvas.getContext('2d');
        tmp_canvas.id = 'tmp_canvas';
        tmp_canvas.width = canvas.width;
        tmp_canvas.height = canvas.height;

        sketch.appendChild(tmp_canvas);

        var mouse = { x: 0, y: 0 };
        var last_mouse = { x: 0, y: 0 };

        // Pencil Points
        var ppts = [];

        /* Mouse Capturing Work */
        tmp_canvas.addEventListener('mousemove', function (e) {
            mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
            mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;
            console.log('mouse capturing activity here...');
        }, false);


        /* Drawing on Paint App */
        tmp_ctx.lineWidth = 12;
        tmp_ctx.lineJoin = 'round';
        tmp_ctx.lineCap = 'round';
        tmp_ctx.strokeStyle = 'blue';
        tmp_ctx.fillStyle = 'blue';

        if (color.toString() == 'green') {
            tmp_ctx.strokeStyle = 'green';
            tmp_ctx.fillStyle = 'green';
        }

        tmp_canvas.addEventListener('mousedown', function (e) {
            tmp_canvas.addEventListener('mousemove', onPaint, false);

            mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
            mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;


            ppts.push({ x: mouse.x, y: mouse.y });

            console.log('mousedown :' + ppts);

            onPaint();
        }, false);

        tmp_canvas.addEventListener('mouseup', function () {
            tmp_canvas.removeEventListener('mousemove', onPaint, false);

            // Writing down to real canvas now
            ctx.drawImage(tmp_canvas, 0, 0);
            // Clearing tmp canvas
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

            // Emptying up Pencil Points
            ppts = [];
        }, false);

        var onPaint = function () {
            console.log('onPaint called x:' + mouse.x + ', y:' + mouse.y);
            // Saving all the points in an array
            ppts.push({ x: mouse.x, y: mouse.y });


            if (ppts.length < 3) {
                var b = ppts[0];
                tmp_ctx.beginPath();
                //ctx.moveTo(b.x, b.y);
                //ctx.lineTo(b.x+50, b.y+50);
                tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);
                tmp_ctx.fill();
                tmp_ctx.closePath();

                return;
            }

            // Tmp canvas is always cleared up before drawing.
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

            tmp_ctx.beginPath();
            tmp_ctx.moveTo(ppts[0].x, ppts[0].y);

            for (var i = 1; i < ppts.length - 2; i++) {
                var c = (ppts[i].x + ppts[i + 1].x) / 2;
                var d = (ppts[i].y + ppts[i + 1].y) / 2;

                tmp_ctx.quadraticCurveTo(ppts[i].x, ppts[i].y, c, d);
            }

            // For the last 2 points
            tmp_ctx.quadraticCurveTo(
               ppts[i].x,
               ppts[i].y,
               ppts[i + 1].x,
               ppts[i + 1].y
           );
            tmp_ctx.stroke();

        };

    }


    function changeColor() {
        color = 'green';
        var canvas = document.querySelector('#paint');
        console.log('window onload event called');

        var ctx = canvas.getContext('2d');

        var sketch = document.querySelector('#sketch');
        var sketch_style = getComputedStyle(sketch);
        canvas.width = parseInt(sketch_style.getPropertyValue('width'));
        canvas.height = parseInt(sketch_style.getPropertyValue('height'));


        // Creating a tmp canvas
        var tmp_canvas = document.querySelector('#tmp_canvas');
        var tmp_ctx = tmp_canvas.getContext('2d');



        var mouse = { x: 0, y: 0 };
        var last_mouse = { x: 0, y: 0 };

        // Pencil Points
        var ppts = [];

        /* Mouse Capturing Work */
        tmp_canvas.addEventListener('mousemove', function (e) {
            mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
            mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;
            console.log('mouse capturing activity here...');
        }, false);


        /* Drawing on Paint App */
        tmp_ctx.lineWidth = 5;
        tmp_ctx.lineJoin = 'round';
        tmp_ctx.lineCap = 'round';
        tmp_ctx.strokeStyle = 'red';
        tmp_ctx.fillStyle = 'red';

        tmp_canvas.addEventListener('mousedown', function (e) {
            tmp_canvas.addEventListener('mousemove', onPaint, false);

            mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
            mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;


            ppts.push({ x: mouse.x, y: mouse.y });

            console.log('mousedown :' + ppts);

            onPaint();
        }, false);

        tmp_canvas.addEventListener('mouseup', function () {
            tmp_canvas.removeEventListener('mousemove', onPaint, false);

            // Writing down to real canvas now
            ctx.drawImage(tmp_canvas, 0, 0);
            // Clearing tmp canvas
            //     tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

            // Emptying up Pencil Points
            //   ppts = [];
        }, false);

        var onPaint = function () {
            console.log('onPaint called x:' + mouse.x + ', y:' + mouse.y);
            // Saving all the points in an array
            ppts.push({ x: mouse.x, y: mouse.y });


            if (ppts.length < 3) {
                var b = ppts[0];
                tmp_ctx.beginPath();
                //ctx.moveTo(b.x, b.y);
                //ctx.lineTo(b.x+50, b.y+50);
                tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);
                tmp_ctx.fill();
                tmp_ctx.closePath();

                return;
            }

            // Tmp canvas is always cleared up before drawing.
            //  tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

            tmp_ctx.beginPath();
            tmp_ctx.moveTo(ppts[0].x, ppts[0].y);

            for (var i = 1; i < ppts.length - 2; i++) {
                var c = (ppts[i].x + ppts[i + 1].x) / 2;
                var d = (ppts[i].y + ppts[i + 1].y) / 2;

                tmp_ctx.quadraticCurveTo(ppts[i].x, ppts[i].y, c, d);
            }

            // For the last 2 points
            tmp_ctx.quadraticCurveTo(
               ppts[i].x,
               ppts[i].y,
               ppts[i + 1].x,
               ppts[i + 1].y
           );
            tmp_ctx.stroke();

        };

    }
</script>
<style>
html, body {
	width: 100%;
	height: 100%;
 

}

#sketch {
	border: 10px solid gray;
	height: 404px;
    width: 670px;
	position: relative;
   
    background-image: url('../Images/sfc_slp_map.gif');
}

#tmp_canvas {
	position: absolute;
	left: 0px; right: 0;
	bottom: 0; top: 0;
	cursor: crosshair;
}
</style>
          <meta charset="utf-8" />
        <title>@ViewBag.Title - My ASP.NET MVC Application</title>
        <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
        <meta name="viewport" content="width=device-width" />
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/modernizr")


</head>
<body>
  <header>
            <div class="content-wrapper">
                <div class="float-left">
                    <p class="site-title">@Html.ActionLink("Interactive Maps App", "Index", "Home")</p>
                </div>
                <div class="float-right">
                    <section id="login">
                        @Html.Partial("_LoginPartial")
                    </section>
                    <nav>
                        <ul id="menu">
                            <li>@Html.ActionLink("Home", "Index", "Home")</li>
                            <li>@Html.ActionLink("About", "About", "Home")</li>
                            <li>@Html.ActionLink("WeatherPrediction", "WeatherPrediction", "Home")</li>
                            <li>@Html.ActionLink("MapPuzzles", "MapPuzzles", "Home")</li>
                            <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                        </ul>
                    </nav>
                </div>
            </div>
        </header>
        <div id="body">
            <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>Pressure Map Interactive Game</h1><br />
                <h2>Draw a line linking all similar numbbers on the map below. Click next to compare your work with the correct one.</h2>
            </hgroup>
             </div>
    </section>
            <section class="content-wrapper main-content clear-fix"> 

<div style=" float: left; background-image: url('../Images/sfc_slp_map.gif');" id="sketch">
   <canvas id="paint"></canvas> 
	
</div>
                @Html.ActionLink("Button Name", "ViewResult", "Home", null, new { @class="imageButton" }) 
                
      </section>
        </div>
        <footer>
            <div class="content-wrapper">
                <div class="float-left">
                    
                    <p>&copy; @DateTime.Now.Year - Interactive Weather Maps Team, Space Apps Challenge</p>
                </div>
            </div>
        </footer>

       
    </body>
</html>